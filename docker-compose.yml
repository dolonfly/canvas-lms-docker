version: "3"
services:
  web: &WEB
    container_name: canvas-lms
    env_file:
      - './.env'
    ports:
        - '80:3000'
    environment:
      CANVAS_LMS_DOMAIN: ${CANVAS_LMS_DOMAIN}
      CANVAS_LMS_ADMIN_EMAIL: ${CANVAS_LMS_ADMIN_EMAIL}
      CANVAS_LMS_ADMIN_PASSWORD: ${CANVAS_LMS_ADMIN_PASSWORD}
      CANVAS_LMS_ACCOUNT_NAME: ${CANVAS_LMS_ACCOUNT_NAME}
      CANVAS_LMS_STATS_COLLECTION: ${CANVAS_LMS_STATS_COLLECTION}
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_DRIVER: postgresql
      REDIS_HOST: redis
      EMAIL_DOMAIN: ${EMAIL_DOMAIN}
      EMAIL_HOST: smtp
      EMAIL_PORT: 1025
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_SENDER_ADDRESS: ${EMAIL_SENDER_ADDRESS}
      EMAIL_SENDER_NAME: ${EMAIL_SENDER_NAME}
      TZ: ${TZ}
      SELF_HOST_PREVIEW_SERVER_HOST: ${SELF_HOST_PREVIEW_SERVER_HOST}
      ECOSYSTEM_KEY: ${CANVAS_ECOSYSTEM_KEY}
      ECOSYSTEM_SECRET: ${CANVAS_ECOSYSTEM_SECRET}
      RCE_APP_HOST: ${RCE_APP_HOST}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      FILE_STORAGE: s3
      S3_AK: ${S3_AK}
      S3_SK: ${S3_SK}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
    volumes:
      - type: volume
        source: app-volume
        target: /opt/canvas/tmp/files
    depends_on:
      redis:
        condition: service_healthy
      doc_preview:
        condition: service_started
      smtp:
        condition: service_started
      db:
        condition: service_healthy
  rce:
    image: instructure/canvas-rce-api
    container_name: canvas-rce
    environment:
      ECOSYSTEM_KEY: ${CANVAS_ECOSYSTEM_KEY}
      ECOSYSTEM_SECRET : ${CANVAS_ECOSYSTEM_SECRET}
      NODE_ENV: production
      PORT: 3001
      STATSD_HOST: localhost
      STATSD_PORT: 3002
    ports:
      - '3001:3001'
    depends_on:
      - web

  redis:
    image: redis:7-alpine
    container_name: redis
    environment:
      TZ: ${TZ}
    command: redis-server --appendonly yes
    healthcheck:
      test: redis-cli ping
    volumes:
      - type: volume
        source: redis-volume
        target: /data
  doc_preview:
    image: dolonfly/doc-preview:4.3.0
    container_name: doc-preview
    ports:
      - '8012:8012'
  smtp:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - '8025:8025'
  db:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
    volumes:
      - type: volume
        source: db-volume
        target: /var/lib/postgresql/data
volumes:
  app-volume:
  db-volume:
  redis-volume: